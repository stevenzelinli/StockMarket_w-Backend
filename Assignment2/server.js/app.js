'use strict';
//TCP LIBRARY & SETUP VARS
const net = require('net');
const PORT = 8000;
const ADDRESS = '127.0.0.1';

//MAKE SURE UNIQUE SESSION IDS ARE GIVEN TO USERS
var sessionCount = 0;
//SERIAL NUMBER GENERATED BY SERVER WHICH INCREMENTS BY 1 FOR EACH "NOTIFY" SENT TO A REGISTERED CLIENT
var SSeq = 0;
//MODELS
//USER
function User(username, socket, CSeq) {
    this.username = username;
    this.socket = socket;
    this.CSeq = CSeq;
    this.session = sessionCount++; // SET SESSION THEN INCREMENT
}
//COMPANY
function Company(symbol, name, openPrice) {
    this.symbol = symbol;
    this.name = name;
    this.openPrice = openPrice;
    this.currentPrice = 0;
    this.closePrice = 0;
    this.buyOrders = [];
    this.sellOrders = [];
    this.transacrions = [];
}
//ORDER
function Order(size, price) {
    this.size = size;
    this.price = price;
    this.dateTime = Date.now();
}
//SERVER SETUP
//LOCAL VARIABLES (RAM)
var users = []; // KEEPS TRACK OF REGISTERED USERS TO NOTIFY
//LOCAL STOCK DATA
var StockData = {
    stockCompanies: [
        new Company("MSFT", "Microsoft Corporation", 46.13),
        new Company("AAPL", "Apple Inc.", 105.22),
        new Company("FB", "Facebook, Inc.", 80.67)
    ]
};
//console.log("Starting State:\n" + JSON.stringify(StockData));
let server = net.createServer(onUserConnect);
server.listen(PORT, ADDRESS);
//NOTIFY
function notifyClients() {
    users.forEach((client) => {
        client.socket.write(JSON.stringify({
            header: {
                verb: "NOTIFY",
                protocol: "SME/TCP-1.0",
                status: "OK"
            },
            SSeq: SSeq++
        }));
    });
    console.log('\nNotified ' + users.length + " users.\n");
}
//DISCONNECT SOCKET
function disconnectSocket(socket) {
    socket.write(JSON.stringify({
        header: {
            protocol: "SME/TCP-1.0",
            status: "FAIL"
        }
    }));
    console.log("\nFailed to process trader request from (" + socket.remoteAddress + ":" + socket.remotePort + "), disconnected.");
    socket.destroy();
    console.log()
}
//RESPOND TO CLIENT REQUEST (NO DATA)
function respondOk(socket, cseq, session) {
    console.log('Server respond:');
    console.log("SME/TCP-1.0 OK\nCSeq: " + cseq + ", Session: " + session);
    socket.write(JSON.stringify({
        header: {
            protocol: "SME/TCP-1.0",
            status: "OK"
        },
        CSeq: cseq,
        session: session
    }));
}
//RESPOND TO CLIENT REQUEST (WITH DATA)
function respondData(socket, cseq, session, data) {
    console.log('Server respond:');
    console.log("SME/TCP-1.0 OK\nCSeq: " + cseq + ", Session: " + session + ", Data: " + data);
    socket.write(JSON.stringify({
        header: {
            protocol: "SME/TCP-1.0",
            status: "OK"
        },
        CSeq: cseq,
        session: session,
        Data: data
    }));
}
//SME PROTOCOL
function onUserConnect(socket) {
    //ON INITIAL CONNECTION
    console.log("\nTrader joining at (" + socket.remoteAddress + ":" + socket.remotePort + ")");
    socket.pipe(socket);
    var thisUser;
    var authenticated = false;
    socket.write("\nConnecting\n");
    socket.on('data', function (data) {
        //PARSE JSON INTO JS OBJECT
        var _data;
        var error = false;
        try {
            _data = JSON.parse(data.toString());
        }
        catch (err) {
            //IF NOT JSON SET ERROR FLAG
            error = true;
        }
        if (error) {
            //DISCONNECT
            disconnectSocket(socket);
        }
        //CHECK PROTOCOL
        else if (_data.header.protocol == "SME/TCP-1.0") {
            socket.write("\nChecking\n");
            //CHECK VERBS
            //IF NO VERB SENT
            if (!_data.header.verb) {
                disconnectSocket(socket);
            }
            //REGISTER USER
            else if (_data.header.verb == "REGISTER") {
                if (!_data.ID || !_data.CSeq) {
                    disconnectSocket(socket);
                }
                else {
                    authenticated = true;
                    console.log("\n" + _data.ID + " requests:");
                    let newUser = new User(_data.ID, socket, _data.CSeq);
                    thisUser = newUser;
                    users.push(newUser);
                    let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + "\n";
                    console.log(userRequest);
                    respondOk(socket, newUser.CSeq, newUser.session);
                }
            }
            //UNREGISTER USER
            else if (_data.header.verb == "UNREGISTER") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated) {
                    disconnectSocket(socket);
                }
                else {
                    console.log("\n" + _data.ID + " requests:");
                    let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + "\n";
                    let userToRemove = users.findIndex((user) => {
                        return user.session == _data.session;
                    });
                    if (userToRemove == -1) {
                        console.log(userRequest);
                        disconnectSocket(socket);
                    }
                    else {
                        users.splice(userToRemove, 1);
                        console.log(userRequest);
                        respondOk(socket, _data.CSeq, _data.session);
                        console.log("\n"+_data.ID+" has closed their session\n")
                        socket.destroy();
                    }
                }
            }
            else if (_data.header.verb == "LIST COMPANIES") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated) {
                    disconnectSocket(socket);
                }
                else {
                    console.log("\n" + _data.ID + " requests:");
                    let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + "\n";
                    console.log(userRequest);
                    respondData(socket, _data.CSeq, _data.session, JSON.stringify(StockData));
                }
            }
            else if (_data.header.verb == "LIST SELLORDERS") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated) {
                    disconnectSocket(socket);
                }
                else {
                    console.log("\n" + _data.ID + " requests:");
                    let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + "\n";
                    console.log(userRequest);

                    var sellOrders = {
                        companies: {}
                    };
                    StockData.stockCompanies.forEach((company) => {
                        sellOrders.companies[company.symbol] = company.sellOrders;
                    });
                    respondData(socket, _data.CSeq, _data.session, JSON.stringify(sellOrders.companies));
                }
            }
            else if (_data.header.verb == "LIST BUYORDERS") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated) {
                    disconnectSocket(socket);
                }
                else {
                    console.log("\n" + _data.ID + " requests:");
                    let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + "\n";
                    console.log(userRequest);
                    var buyOrders = {
                        companies: {}
                    };
                    StockData.stockCompanies.forEach((company) => {
                        buyOrders.companies[company.symbol] = company.buyOrders;
                    });
                    respondData(socket, _data.CSeq, _data.session, JSON.stringify(buyOrders.companies));
                }
            }
            //ORDER LOGIC
            else if (_data.header.verb == "SELLORDER") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated || !_data.Data) {
                    disconnectSocket(socket);
                }
                else {
                    if (!_data.Data.company || !_data.Data.order) {
                        disconnectSocket(socket);
                    }
                    else {
                        console.log("\n" + _data.ID + " requests:");
                        let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + ", Data: " + JSON.stringify(_data.Data) + "\n";
                        console.log(userRequest);
                        
                        StockData.stockCompanies.forEach((company) => {
                            if (_data.Data.company == company.symbol) {
                                //IF THERE ARE BUY ORDERS
                                if (company.buyOrders.length > 0) {
                                    var sale;
                                    company.buyOrders.some((order) => {
                                        //TRANSACTION
                                        if (order.price >= _data.Data.order.price) {
                                            if (order.size == _data.Data.order.size) {
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                //DELETE BUY ORDER
                                                let orderToDelete = company.buyOrders.indexOf(order);
                                                company.buyOrders.splice(orderToDelete, 1);
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                return true;
                                            }
                                            else if (order.size > _data.Data.order.size) {
                                                var remainingSize = order.size - _data.Data.order.size;
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                order.size = remainingSize;
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                return true;
                                            }
                                            else if (order.size < _data.Data.order.size) {
                                                var remainingSize = _data.Data.order.size - order.size;
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                order.size = remainingSize;
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                //DELETE BUY ORDER
                                                let orderToDelete = company.buyOrders.indexOf(order);
                                                company.buyOrders.splice(orderToDelete, 1);
                                                //PUSH SELL ORDER
                                                company.sellOrders.push(new Order(remainingSize, _data.Data.order.price));
                                                //SORT BY ASCENDING
                                                let sortedSellOrders = company.sellOrders.sort((a, b) => { return a.price - b.price; });
                                                company.sellOrders = sortedSellOrders;
                                                return true;
                                            }
                                        }
                                        else {
                                            //PUSH SELL ORDER
                                            company.sellOrders.push(new Order(_data.Data.order.size, _data.Data.order.price));
                                            //SORT BY ASCENDING
                                            let sortedSellOrders = company.sellOrders.sort((a, b) => { return a.price - b.price; });
                                            company.sellOrders = sortedSellOrders;
                                            return true;
                                        }
                                    });
                                }
                                else {
                                    company.sellOrders.push(new Order(_data.Data.order.size, _data.Data.order.price));
                                    //SORT BY ASCENDING
                                    let sortedSellOrders = company.sellOrders.sort((a, b) => { return a.price - b.price; });
                                    company.sellOrders = sortedSellOrders;
                                }
                            }
                        });
                        respondOk(socket, _data.CSeq, _data.session);
                        notifyClients();
                    }
                }
            }
            else if (_data.header.verb == "BUYORDER") {
                if (!_data.ID || !_data.CSeq || !_data.session || !authenticated || !_data.Data) {
                    disconnectSocket(socket);
                }
                else {
                    if (!_data.Data.company || !_data.Data.order) {
                        disconnectSocket(socket);
                    }
                    else {
                        console.log("\n" + _data.ID + " requests:");
                        let userRequest = _data.header.verb + " SME/TCP-1.0\nID: " + _data.ID + ", CSeq: " + _data.CSeq + ", Session: " + _data.session + ", Data: " + JSON.stringify(_data.Data) + "\n";
                        console.log(userRequest);

                        StockData.stockCompanies.forEach((company) => {
                            if (_data.Data.company == company.symbol) {
                                //IF THERE ARE BUY ORDERS
                                if (company.sellOrders.length > 0) {
                                    var sale;
                                    company.sellOrders.some((order) => {
                                        //TRANSACTION
                                        if (order.price < _data.Data.order.price) {
                                            if (order.size == _data.Data.order.size) {
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                //DELETE SELL ORDER
                                                let orderToDelete = company.sellOrders.indexOf(order);
                                                company.sellOrders.splice(orderToDelete, 1);
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                return true;
                                            }
                                            else if (order.size > _data.Data.order.size) {
                                                var remainingSize = order.size - _data.Data.order.size;
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                order.size = remainingSize;
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                return true;
                                            }
                                            else if (order.size < _data.Data.order.size) {
                                                var remainingSize = _data.Data.order.size - order.size;
                                                sale = new Order(_data.Data.order.size, _data.Data.order.price);
                                                company.transacrions.push(sale);
                                                order.size = remainingSize;
                                                //UPDATE PRICE
                                                company.currentPrice = _data.Data.order.price;
                                                //DELETE SELL ORDER
                                                let orderToDelete = company.sellOrders.indexOf(order);
                                                company.sellOrders.splice(orderToDelete, 1);
                                                //PUSH BUY ORDER
                                                company.buyOrders.push(new Order(remainingSize, _data.Data.order.price));
                                                //SORT BY DESCENDING
                                                let sortedBuyOrders = company.buyOrders.sort((a, b) => { return b.price - a.price; });
                                                company.buyOrders = sortedBuyOrders;
                                                return true;
                                            }
                                        }
                                        else {
                                            //PUSH BUY ORDER
                                            company.buyOrders.push(new Order(_data.Data.order.size, _data.Data.order.price));
                                            //SORT BY DESCENDING
                                            let sortedBuyOrders = company.buyOrders.sort((a, b) => { return b.price - a.price; });
                                            company.buyOrders = sortedBuyOrders;
                                            return true;
                                        }
                                    });
                                }
                                else {
                                    //PUSH BUY ORDER
                                    company.buyOrders.push(new Order(_data.Data.order.size, _data.Data.order.price));
                                    //SORT BY DESCENDING
                                    let sortedBuyOrders = company.buyOrders.sort((a, b) => { return b.price - a.price; });
                                    company.buyOrders = sortedBuyOrders;
                                    return true;
                                }
                            }
                        });
                        respondOk(socket, _data.CSeq, _data.session);
                        notifyClients();
                    }
                }
            }
            //VERB DOES NOT EXIST
            else {
                disconnectSocket(socket);
            }
        }
        //IF NOT CORRECT PROTOCOL FAIL AND DISCONNECT THE CLIENT
        else {
            disconnectSocket(socket);
        }
    });
    socket.on('end', function () {
        if (thisUser) {
            users.splice(users.indexOf(thisUser), 1);
            console.log("\n" + thisUser.username + " has closed their session\n");
        }
        else {
            console.log("\nTrader left\n");
        }
    });
}

console.log('Stock Exchange Server available on ' + ADDRESS + ':' + PORT);
